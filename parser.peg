# This code is hereby placed in the public domain.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# %prefix "parser"

%value "ast_p_t"
%auxil "struct ParseProgress *"

%header {
#include "util.h"
#include "ast.h"
#include "parser_config.h"
typedef struct AST * ast_p_t;
}

%source {
   char *dbgEventNames[3] = {" eval", "MATCH", "nomatc"};
}

translation_unit
   <- _ f:function_declaration _ ';' { $$ = f; }
    / _ f:function_definition        { $$ = f; }
    / _ sl: statement_list           { $$ = sl; }
    / _ eof                          { $$ = NULL; }

variable_declaration
   <- t:type_name _ i:identifier { $$ = AST_C(AST_N(auxil, t_variable_declaration, "", $0s), AST_S(t, i)); }

variable_declaration_statement
   <- e:extern _ v:variable_declaration { $$ = AST_C(e, v); } 
    / v:variable_declaration _ ';'      { $$ = v; }

class_declaration
   <- c:class _ i:identifier _ '{' _ m:class_member_declaration_list _ '}' { $$ = AST_C(c, AST_S(i, AST_C(AST_N(auxil, t_class_body, "", $0s), m))); }

class_member_declaration_list
   <- l:class_member_declaration_list _ m:class_member_declaration _ { $$ = AST_S(l, m); }
    / m:class_member_declaration                                   _ { $$ = m; }

class_member_declaration
   <- v:variable_declaration_statement _ { $$ = v; }

impl_block
   <- im:impl _ id: identifier _ '{' _ il:implementations_list _ '}' { $$ = AST_C(im, AST_S(id, il)); }

implementations_list
   <- il:implementations_list _ i:implementation  { $$ = AST_S(il, i); }
    / i:implementation                      { $$ = i; }

implementation
   <- f:function_definition { $$ = f; }

# variable_declaration is valid in all places parameter_declaration is
# however, parameter_declaration is not valid in all places variable_declaration but not vice-versa
parameter_declaration
   <- t:type_name _ i:identifier { $$ = AST_C(AST_N(auxil, t_variable_declaration, "", $0s), AST_S(t, i)); }

parameter_list
   <- pl:parameter_list _ ',' _ p:parameter_declaration  { $$ = AST_S(pl, p); }
    / p:parameter_declaration                            { $$ = p; }

function_declaration
   <- t:type_name _ f:fun _ i:identifier _ '(' _ ')'                     { $$ = AST_C(f, AST_S(t, i)); }
    / t:type_name _ f:fun _ i:identifier _ '(' _ p:parameter_list _ ')'  { $$ = AST_C(f, AST_S(AST_S(t, i), p)); }
    / f:fun _ i:identifier _ '(' _ ')'                     { $$ = AST_C(f, i); }
    / f:fun _ i:identifier _ '(' _ p:parameter_list _ ')'  { $$ = AST_C(f, AST_S(i, p)); }

function_definition
   <- d:function_declaration _ a:asm_block { $$ = AST_C(d, a); }
    / d:function_declaration _ c:compound_statement { $$ = AST_C(d, c); }

asm_block
   <- kw_asm _ '{' _ a:asm_block_contents _ '}' { $$ = AST_C(AST_N(auxil, t_asm, "", $0s), a); }

asm_block_contents
   <- a1:asm_block_contents _ a2:asm_block_contents { $$ = AST_S(a1, a2); }
    / _ (!eol [^"}"])*eol                          { char *noNlStr = strdup($0); noNlStr[strlen(noNlStr) - 1] = '\0'; $$ = AST_N(auxil, t_asm, noNlStr, $0s); free(noNlStr); }

primary_expression
   <- i:identifier             { $$ = i; }
    / c:constant               { $$ = c; }
    / s:string_literal         { $$ = s; }
    / '(' _ e:expression _ ')' { $$ = e; }

function_call
   <- i:identifier _ '(' _ ')'                             { $$ = AST_C(AST_N(auxil, t_function_call, "", $0s), i); }
    / i:identifier _ '(' _ a:argument_expression_list ')'  { $$ = AST_C(AST_N(auxil, t_function_call, "", $0s), AST_S(i, a)); }

method_call
   <- p:postfix_expression _ d:dot _ f:function_call     { $$ = AST_C(AST_N(auxil, t_method_call, "", $0s), AST_C(d, AST_S(p, f))); }

postfix_expression
   <- m:method_call                                      { $$ = m; }
    / p:postfix_expression _ '[' _ i:expression _ ']'    { $$ = AST_C(AST_N(auxil, t_array_index, "", $0s), AST_S(p, i)); }
    / f:function_call                                    { $$ = f; }
    / p:postfix_expression _ d:dot _ i:identifier          { $$ = AST_C(d, AST_S(p, i)); }
    / p:primary_expression                               { $$ = p; }

argument_expression_list
   <- el:argument_expression_list _ ',' _ ae:assignment_expression  { $$ = AST_S(el, ae); }
    / a:assignment_expression                                       { $$ = a; }

unary_expression
   <- u:unary_operator _ c:cast_expression  { $$ = AST_C(u, c); }
    / p:postfix_expression                  { $$ = p; }
    / s:sizeof _ u:unary_expression         { $$ = AST_C(s, u); }
    / s:sizeof _ '(' _ t:type_name _ ')'    { $$ = AST_C(s, t); }

unary_operator
   <- s:single_and  { s->type = t_address_of; $$ = s; }
    / '*'           { $$ = AST_N(auxil, t_dereference, "", $0s); }
    / '~'           { $$ = AST_N(auxil, t_bitwise_not, "", $0s); }
    / '!' !('=')    { $$ = AST_N(auxil, t_logical_not, "", $0s); }

cast_expression
   <- '(' _ t:type_name _ ')' _ c:cast_expression  { $$ = AST_C(AST_N(auxil, t_cast, "", $0s), AST_S(t, c)); }
    / u:unary_expression                           { $$ = u; }

multiplicative_expression
   <- m:multiplicative_expression _ '*' _ c:cast_expression  { $$ = AST_C(AST_N(auxil, t_multiply, "", $0s), AST_S(m, c)); }
    / m:multiplicative_expression _ '/' _ c:cast_expression  { $$ = AST_C(AST_N(auxil, t_divide, "", $0s), AST_S(m, c)); }
    / m:multiplicative_expression _ '%' _ c:cast_expression  { $$ = AST_C(AST_N(auxil, t_modulo, "", $0s), AST_S(m, c)); }
    / c:cast_expression                                      { $$ = c; }

additive_expression
   <- a:additive_expression _ '+' _ m:multiplicative_expression  { $$ = AST_C(AST_N(auxil, t_add, "", $0s), AST_S(a, m)); }
    / a:additive_expression _ '-' _ m:multiplicative_expression  { $$ = AST_C(AST_N(auxil, t_subtract, "", $0s), AST_S(a, m)); }
    / m:multiplicative_expression                                { $$ = m; }

shift_expression
   <- s:shift_expression _ l:left_op _ a:additive_expression   { $$ = AST_C(l, AST_S(s, a)); }
    / s:shift_expression _ r:right_op _ a:additive_expression  { $$ = AST_C(r, AST_S(s, a)); }
    / a:additive_expression                                    { $$ = a; }

relational_expression
   <- r:relational_expression _ '<' _ s:shift_expression        { $$ = AST_C(AST_N(auxil, t_less_than, "", $0s), AST_S(r, s)); }
    / r:relational_expression _ '>' _ s:shift_expression        { $$ = AST_C(AST_N(auxil, t_greater_than, "", $0s), AST_S(r, s)); }
    / r:relational_expression _ lte:le_op _ s:shift_expression  { $$ = AST_C(lte, AST_S(r, s)); }
    / r:relational_expression _ gte:ge_op _ s:shift_expression  { $$ = AST_C(gte, AST_S(r, s)); }
    / s:shift_expression                                        { $$ = s; }

equality_expression
   <- e:equality_expression _ eq:eq_op _ r:relational_expression  { $$ = AST_C(eq, AST_S(e, r)); }
    / e:equality_expression _ ne:ne_op _ r:relational_expression  { $$ = AST_C(ne, AST_S(e, r)); }
    / r:relational_expression                                    { $$ = r; }

and_expression
   <- a:and_expression _ s:single_and _ e:equality_expression  { s->type = t_bitwise_and; $$ = AST_C(s, AST_S(a, e)); }
    / e:equality_expression                                    { $$ = e; }

exclusive_or_expression
   <- e:exclusive_or_expression _ '^' _ a:and_expression  { $$ = AST_C(AST_N(auxil, t_bitwise_xor, "", $0s), AST_S(e, a)); }
    / a:and_expression                                   { $$ = a; }

inclusive_or_expression
   <- i:inclusive_or_expression _ '|' _ e:exclusive_or_expression  { $$ = AST_C(AST_N(auxil, t_bitwise_or, "", $0s), AST_S(i, e)); }
    / e:exclusive_or_expression                                   { $$ = e; }

logical_and_expression
   <- l:logical_and_expression _ a:and_op _ i:inclusive_or_expression  { $$ = AST_C(a, AST_S(l, i)); }
    / i:inclusive_or_expression                                       { $$ = i; }

logical_or_expression
   <- lo:logical_or_expression _ oo:or_op _ la:logical_and_expression  { $$ = AST_C(oo, AST_S(lo, la)); }
    / la:logical_and_expression                                       { $$ = la; }

conditional_expression
   <- lo:logical_or_expression { $$ = lo; }

assignment_expression
   <- u:unary_expression _ ao:assignment_operator _ ae:assignment_expression  { $$ = AST_C(ao, AST_S(u, ae)); }
    / c:conditional_expression                                                { $$ = c; }

assignment_operator
   <- '='   { $$ = AST_N(auxil, t_assign, $0, $0s); }
    / '+='  { $$ = AST_N(auxil, t_plus_equals, $0, $0s); }
    / '-='  { $$ = AST_N(auxil, t_minus_equals, $0, $0s); }
    / '*='  { $$ = AST_N(auxil, t_times_equals, $0, $0s); }
    / '/='  { $$ = AST_N(auxil, t_divide_equals, $0, $0s); }
    / '%='  { $$ = AST_N(auxil, t_modulo_equals, $0, $0s); }
    / '&='  { $$ = AST_N(auxil, t_bitwise_and_equals, $0, $0s); }
    / '|='  { $$ = AST_N(auxil, t_bitwise_or_equals, $0, $0s); }
    / '^='  { $$ = AST_N(auxil, t_bitwise_xor_equals, $0, $0s); }
    / '<<=' { $$ = AST_N(auxil, t_lshift_equals, $0, $0s); }
    / '>>=' { $$ = AST_N(auxil, t_rshift_equals, $0, $0s); }

expression
   <- a:assignment_expression  { $$ = a; }

compound_statement
   <- '{' _ '}'                     { $$ = AST_N(auxil, t_compound_statement, "", $0s); }
    / '{' _ sl:statement_list _ '}' { $$ = AST_C(AST_N(auxil, t_compound_statement, "", $0s), sl); }

statement
   <- c:compound_statement                                                           { $$ = c; }
    / c:class_declaration _ ';'                                                      { $$ = c; }
    / i:impl_block                                                                   { $$ = i; }
    / ';'                                                                            { $$ = NULL; }
    / v:variable_declaration_statement                                               { $$ = v; }
    / v:variable_declaration _ '=' _ e:expression _ ';'                              { $$ = AST_C(AST_N(auxil, t_assign, "", $0s), AST_S(v, e)); }
    / e:expression _ ';'                                                             { $$ = e; }
    / if:if _ '(' _ e:expression _ ')' _ s1:statement _ kw_else _ s2:statement       { $$ = AST_C(if, AST_S(e, AST_S(s1, s2))); }
    / if:if _ '(' _ e:expression _ ')' _ s:statement                                 { $$ = AST_C(if, AST_S(e, s)); }
    / w:while _ '(' _ e:expression _ ')' _ s:statement                               { $$ = AST_C(w, AST_S(e, s)); }
    / r:return _ e:expression ';'                                                    { $$ = AST_C(r, e); }
    / r:return _ ';'                                                                 { $$ = r; }

statement_list
   <- sl:statement_list _ s:statement  { $$ = AST_S(sl, s); }
    / s:statement                      { $$ = s; }

# only allow array sizes to be declared at the very end of a type name (no multidimensional arrays)
type_name
   <- t:incomplete_type_name _ '[' _ c:constant _ ']' { $$ = AST_C(AST_N(auxil, t_type_name, "", $0s), AST_S(t, AST_C(AST_N(auxil, t_array_index, "", $0s), c))); }
    / t:incomplete_type_name                          { $$ = AST_C(AST_N(auxil, t_type_name, "", $0s), t); }

incomplete_type_name
   <- t:incomplete_type_name _ '*' { $$ = AST_S(t, AST_N(auxil, t_dereference, "", $0s)); }
    / n:non_pointer_typename       { $$ = n; }

non_pointer_typename
   <- t:any       { $$ = t; }
    / t:u8         { $$ = t; }
    / t:u16        { $$ = t; }
    / t:u32        { $$ = t; }
    / t:u64        { $$ = t; }
    / i:identifier { $$ = i; }

identifier
   <- !keyword LETTER(LETTER/DIGIT)*  { $$ = AST_N(auxil, t_identifier, $0, $0s); }

# integer
#		<- '0'[xX]X+
#		 {
#				 $$ = match(t_constant)
#		 }
#		 / !'0' D+
#		 {
#				 $$ = match(t_constant)
#		 }

keyword
   <- kw_fun
    / kw_class
    / kw_any
    / kw_u8
    / kw_u16
    / kw_u32
    / kw_u64
    / kw_sizeof
    / kw_if
    / kw_else
    / kw_while
    / kw_return
    / kw_asm
    / kw_semicolon
    / kw_left_op
    / kw_right_op
    / kw_le_op
    / kw_ge_op
    / kw_eq_op
    / kw_ne_op
    / kw_and_op
    / kw_single_and
    / kw_or_op
    / kw_impl

kw_fun		   <- 'fun' !(LETTER/DIGIT)
kw_class       <- 'class' !(LETTER/DIGIT)
kw_any		   <- 'any' !(LETTER/DIGIT)
kw_u8		      <- 'u8' !(LETTER/DIGIT)
kw_u16		   <- 'u16' !(LETTER/DIGIT)
kw_u32		   <- 'u32' !(LETTER/DIGIT)
kw_u64		   <- 'u64' !(LETTER/DIGIT)
kw_sizeof      <- 'sizeof' !(LETTER/DIGIT)
kw_if		      <- 'if' !(LETTER/DIGIT)
kw_else		   <- 'else' !(LETTER/DIGIT)
kw_while       <- 'while' !(LETTER/DIGIT)
kw_return      <- 'return' !(LETTER/DIGIT)
kw_extern      <- 'extern' !(LETTER/DIGIT)
kw_asm         <- 'asm' !(LETTER/DIGIT)
kw_semicolon   <- ';'
kw_dot         <- '.' !('.')
kw_left_op     <- '<<'
kw_right_op    <- '>>'
kw_le_op       <- '<='
kw_ge_op       <- '>='
kw_eq_op       <- '=='
kw_ne_op       <- '!='
kw_and_op      <- '&&'
kw_single_and  <- '&' !(kw_single_and)
kw_or_op       <- '||'
kw_impl        <- 'impl' !(LETTER/DIGIT)


fun    <- kw_fun     { $$ = AST_N(auxil, t_fun, $0, $0s); }
class  <- kw_class   { $$ = AST_N(auxil, t_class, $0, $0s); }
any    <- kw_any     { $$ = AST_N(auxil, t_any, $0, $0s); }
u8     <- kw_u8      { $$ = AST_N(auxil, t_u8, $0, $0s); }
u16    <- kw_u16     { $$ = AST_N(auxil, t_u16, $0, $0s); }
u32    <- kw_u32     { $$ = AST_N(auxil, t_u32, $0, $0s); }
u64    <- kw_u64     { $$ = AST_N(auxil, t_u64, $0, $0s); }
sizeof <- kw_sizeof  { $$ = AST_N(auxil, t_sizeof, $0, $0s); }
if     <- kw_if      { $$ = AST_N(auxil, t_if, $0, $0s); }
while  <- kw_while   { $$ = AST_N(auxil, t_while, $0, $0s); }
return <- kw_return  { $$ = AST_N(auxil, t_return, $0, $0s); }
extern <- kw_extern  { $$ = AST_N(auxil, t_extern, $0, $0s); }
impl   <- kw_impl    { $$ = AST_N(auxil, t_impl, $0, $0s); }

dot           <- kw_dot       { $$ = AST_N(auxil, t_dot, $0, $0s); }
left_op       <- kw_left_op   { $$ = AST_N(auxil, t_lshift, $0, $0s); }
right_op      <- kw_right_op  { $$ = AST_N(auxil, t_rshift, $0, $0s); }
le_op         <- kw_le_op     { $$ = AST_N(auxil, t_less_than_equals, $0, $0s); }
ge_op         <- kw_ge_op     { $$ = AST_N(auxil, t_greater_than_equals, $0, $0s); }
eq_op         <- kw_eq_op     { $$ = AST_N(auxil, t_equals, $0, $0s); }
ne_op         <- kw_ne_op     { $$ = AST_N(auxil, t_not_equals, $0, $0s); }
and_op        <- kw_and_op    { $$ = AST_N(auxil, t_logical_and, $0, $0s); }
# could be either addres-of or bitwise and - should be set by the parser when true meaning is determined 
single_and    <- kw_single_and   { $$ = AST_N(auxil, t_bitwise_and, $0, $0s); } 
or_op         <- kw_or_op     { $$ = AST_N(auxil, t_logical_or, $0, $0s); }


# O <- [0-7]
DIGIT <- [0-9]
# X <- [0-9a-fA-F]
LETTER <- [a-zA-Z_]


escape_character
   <- "\\a"
    / "\\b"
    / "\\n"
    / "\\r"
    / "\\t"
    / "\\\\"
    / "\\'"
    / "\\\""

constant
   <- "0x" [0-9ABCDEFabcdef]+             { $$ = AST_N(auxil, t_constant, $0, $0s); }
    / DIGIT+                              { $$ = AST_N(auxil, t_constant, $0, $0s); }
    / "\'" char_literal_character "\'"    { char *quotedText = malloc(strlen($0) - 1); memcpy(quotedText, $0 + 1, strlen($0) - 1); quotedText[strlen($0) - 2] = 0; $$ = AST_N(auxil, t_char_literal, quotedText, $0s); free(quotedText); }

char_literal_character
   <- escape_character
    / [^"\'"]

string_literal
   <- '"' string_literal_character* '"'   { char *quotedText = malloc(strlen($0) - 1); memcpy(quotedText, $0 + 1, strlen($0) - 1); quotedText[strlen($0) - 2] = 0; $$ = AST_N(auxil, t_string_literal, quotedText, $0s); free(quotedText); }

string_literal_character
   <- escape_character
    / [^"\""]
    / "'"
_ 
   <- _ _
    / '#' space* <DIGIT+> space* <(!space .)+> (!eol .)* eol { auxil->curLine = atoi($1); setCurrentFile(&auxil->curFile, $2); auxil->curCol = 0; }    # for now, just ignore the preprocessor's line markers
    / space*

space <- blank / eol
blank <- [ \t\v\f]
eol <- '\r\n' / '\n' / '\r'
eof <- !.