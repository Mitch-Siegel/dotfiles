# This code is hereby placed in the public domain.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# %prefix "parser"

%value "ast_p_t"
%auxil "struct ParseProgress *"

%header {
#include "util.h"
#include "ast.h"
#include "parser_config.h"
typedef struct Ast * ast_p_t;
}

%source {
   char *dbgEventNames[3] = {" eval", "MATCH", "nomatc"};
}


translation_unit
   <- _ preprocessor_data
    / _ f:function_declaration _ kw_semicolon { $$ = f; }
    / _ f:function_definition                 { $$ = f; }
    / _ sl: statement_list                    { $$ = sl; }
    / _ eof                                   { $$ = NULL; }

variable_declaration
   <- t:type_name _ i:identifier { $$ = ast_c(ast_n(auxil, T_VARIABLE_DECLARATION, "", $0s), ast_s(t, i)); }

variable_declaration_statement
   <- e:extern _ v:variable_declaration { $$ = ast_c(e, v); } 
    / v:variable_declaration _ kw_semicolon      { $$ = v; }

struct_declaration
   <- s:struct _ i:identifier _ kw_lcurly _ m:struct_member_declaration_list _ kw_rcurly { $$ = ast_c(s, ast_s(i, ast_c(ast_n(auxil, T_STRUCT_BODY, "", $0s), m))); }

struct_member_declaration_list
   <- l:struct_member_declaration_list _ m:struct_member_declaration _ { $$ = ast_s(l, m); }
    / m:struct_member_declaration                                   _ { $$ = m; }

struct_member_declaration
   <- v:variable_declaration_statement _              { $$ = v; }
    / p:public _ v:variable_declaration_statement _   { $$ = ast_c(p, v); }

impl_block
   <- im:impl _ id: identifier _ kw_lcurly _ il:implementations_list _ kw_rcurly { $$ = ast_c(im, ast_s(id, il)); }

implementations_list
   <- il:implementations_list _ i:implementation  { $$ = ast_s(il, i); }
    / i:implementation                      { $$ = i; }

implementation
   <- m:method_declaration _ kw_semicolon                { $$ = m; }
    / f:function_declaration _ kw_semicolon              { $$ = f; }
    / p:public _ m:method_declaration _ kw_semicolon     { $$ = ast_c(p, m); }
    / p:public _ f:function_declaration _ kw_semicolon   { $$ = ast_c(p, f); }
    / m:method_definition                       { $$ = m; }
    / f:function_definition                     { $$ = f; }
    / p:public _ m:method_definition            { $$ = ast_c(p, m); }
    / p:public _ f:function_definition          { $$ = ast_c(p, f); }

enum_declaration
   <- e:enum _ i:identifier _ kw_lcurly _ m:enum_member_declaration_list _ kw_rcurly { $$ = ast_c(e, ast_s(i, m)); }
    / e:enum _ i:identifier _ kw_lcurly _ m:enum_member_declaration_list _ kw_comma _ kw_rcurly { $$ = ast_c(e, ast_s(i, m)); }

enum_member_declaration_list
   <- l:enum_member_declaration_list _ kw_comma _  m:enum_member_declaration { $$ = ast_s(l, m); }
    / m:enum_member_declaration                                              { $$ = m; }

enum_member_declaration
   <- i:identifier { $$ = i; }


# variable_declaration is valid in all places parameter_declaration is
# however, parameter_declaration is not valid in all places variable_declaration but not vice-versa
parameter_declaration
   <- t:type_name _ i:identifier { $$ = ast_c(ast_n(auxil, T_VARIABLE_DECLARATION, "", $0s), ast_s(t, i)); }

parameter_list
   <- pl:parameter_list _ kw_comma _ p:parameter_declaration  { $$ = ast_s(pl, p); }
    / p:parameter_declaration                            { $$ = p; }

function_declaration
   <- t:type_name _ f:fun _ i:identifier _ kw_lparen _ kw_rparen                     { $$ = ast_c(f, ast_s(t, i)); }
    / t:type_name _ f:fun _ i:identifier _ kw_lparen _ p:parameter_list _ kw_rparen  { $$ = ast_c(f, ast_s(ast_s(t, i), p)); }
    / f:fun _ i:identifier _ kw_lparen _ kw_rparen                     { $$ = ast_c(f, i); }
    / f:fun _ i:identifier _ kw_lparen _ p:parameter_list _ kw_rparen  { $$ = ast_c(f, ast_s(i, p)); }

function_definition
   <- d:function_declaration _ a:asm_block { $$ = ast_c(d, a); }
    / d:function_declaration _ c:compound_statement { $$ = ast_c(d, c); }

method_parameter_list
   <- mpl:method_parameter_list _ kw_comma _ p:parameter_declaration  { $$ = ast_s(mpl, p); }
    / s:self                                                     { $$ = s; }

method_declaration
   <- t:type_name _ f:fun _ i:identifier _ kw_lparen _ mpl:method_parameter_list _ kw_rparen  { $$ = ast_c(f, ast_s(ast_s(t, i), mpl)); }
    / f:fun _ i:identifier _ kw_lparen _ mpl:method_parameter_list _ kw_rparen  { $$ = ast_c(f, ast_s(i, mpl)); }

method_definition
   <- d:method_declaration _ a:asm_block { $$ = ast_c(d, a); }
    / d:method_declaration _ c:compound_statement { $$ = ast_c(d, c); }

asm_block
   <- kw_asm _ kw_lcurly _ a:asm_block_contents _ kw_rcurly { $$ = ast_c(ast_n(auxil, T_ASM, "", $0s), a); }

asm_block_contents
   <- a1:asm_block_contents _ a2:asm_block_contents { $$ = ast_s(a1, a2); }
    / _ a:asm_line                                 { $$ = a; }

asm_line
   <- (!eol [^"}"])* { $$ = ast_n(auxil, T_ASM, $0, $0s); }

primary_expression
   <- i:identifier             { $$ = i; }
    / c:constant               { $$ = c; }
    / s:string_literal         { $$ = s; }
    / kw_lparen _ e:expression _ kw_rparen { $$ = e; }

function_call
   <- i:identifier _ kw_lparen _ kw_rparen                             { $$ = ast_c(ast_n(auxil, T_FUNCTION_CALL, "", $0s), i); }
    / i:identifier _ kw_lparen _ a:argument_expression_list kw_rparen  { $$ = ast_c(ast_n(auxil, T_FUNCTION_CALL, "", $0s), ast_s(i, a)); }

associated_member_call
   <- t:type_name _ a:associated_call _ f:function_call { $$ = ast_c(a, ast_s(t, f)); }

method_call
   <- p:postfix_expression _ d:dot _ f:function_call     { $$ = ast_c(ast_n(auxil, T_METHOD_CALL, "", $0s), ast_c(d, ast_s(p, f))); }
    / s:self _ d:dot _ f:function_call                   { $$ = ast_c(ast_n(auxil, T_METHOD_CALL, "", $0s), ast_c(d, ast_s(s, f))); }

postfix_expression
   <- a:associated_member_call                           { $$ = a; }
    / p:postfix_expression _ kw_lbracket _ i:expression _ kw_rbracket    { $$ = ast_c(ast_n(auxil, T_ARRAY_INDEX, "", $0s), ast_s(p, i)); }
    / m:method_call                                      { $$ = m; }
    / p:postfix_expression _ d:dot _ i:identifier        { $$ = ast_c(d, ast_s(p, i)); }
    / f:function_call                                    { $$ = f; }
    / p:primary_expression                               { $$ = p; }

argument_expression_list
   <- el:argument_expression_list _ kw_comma _ e:expression { $$ = ast_s(el, e); }
    / e:expression                                          { $$ = e; }

unary_expression
   <- u:unary_operator _ c:cast_expression  { $$ = ast_c(u, c); }
    / p:postfix_expression                  { $$ = p; }
    / s:sizeof _ u:unary_expression         { $$ = ast_c(s, u); }
    / s:sizeof _ kw_lparen _ t:type_name _ kw_rparen    { $$ = ast_c(s, t); }

unary_operator
   <- s:single_and  { s->type = T_ADDRESS_OF; $$ = s; }
    / '*'           { $$ = ast_n(auxil, T_DEREFERENCE, $0, $0s); }
    / '~'           { $$ = ast_n(auxil, T_BITWISE_NOT, $0, $0s); }
    / '!' !('=')    { $$ = ast_n(auxil, T_LOGICAL_NOT, $0, $0s); }

cast_expression
   <- kw_lparen _ t:type_name _ kw_rparen _ c:cast_expression  { $$ = ast_c(ast_n(auxil, T_CAST, "", $0s), ast_s(t, c)); }
    / u:unary_expression                           { $$ = u; }

multiplicative_expression
   <- m:multiplicative_expression _ mo:multiplicative_op _ c:cast_expression  { $$ = ast_c(mo, ast_s(m, c)); }
    / c:cast_expression                                      { $$ = c; }

multiplicative_op
   <- '*' { $$ = ast_n(auxil, T_MULTIPLY, $0, $0s); }
    / '/' { $$ = ast_n(auxil, T_DIVIDE, $0, $0s); }
    / '%' { $$ = ast_n(auxil, T_MODULO, $0, $0s); }

additive_expression
   <- a:additive_expression _ ao:additive_op _ m:multiplicative_expression  { $$ = ast_c(ao, ast_s(a, m)); }
    / m:multiplicative_expression                                { $$ = m; }

additive_op
   <- '+' { $$ = ast_n(auxil, T_ADD, $0, $0s); }
    / '-' { $$ = ast_n(auxil, T_SUBTRACT, $0, $0s); }

shift_expression
   <- s:shift_expression _ l:left_op _ a:additive_expression   { $$ = ast_c(l, ast_s(s, a)); }
    / s:shift_expression _ r:right_op _ a:additive_expression  { $$ = ast_c(r, ast_s(s, a)); }
    / a:additive_expression                                    { $$ = a; }

relational_expression
   <- r:relational_expression _ l:l_than _ s:shift_expression  { $$ = ast_c(l, ast_s(r, s)); }
    / r:relational_expression _ g:g_than _ s:shift_expression  { $$ = ast_c(g, ast_s(r, s)); }
    / r:relational_expression _ lte:le_op _ s:shift_expression { $$ = ast_c(lte, ast_s(r, s)); }
    / r:relational_expression _ gte:ge_op _ s:shift_expression { $$ = ast_c(gte, ast_s(r, s)); }
    / s:shift_expression                                       { $$ = s; }

l_than
   <- '<' { $$ = ast_n(auxil, T_LESS_THAN, $0, $0s); }

g_than
   <- '>' { $$ = ast_n(auxil, T_GREATER_THAN, $0, $0s); }

equality_expression
   <- e:equality_expression _ eq:eq_op _ r:relational_expression  { $$ = ast_c(eq, ast_s(e, r)); }
    / e:equality_expression _ ne:ne_op _ r:relational_expression  { $$ = ast_c(ne, ast_s(e, r)); }
    / r:relational_expression                                    { $$ = r; }

and_expression
   <- a:and_expression _ s:single_and _ e:equality_expression  { s->type = T_BITWISE_AND; $$ = ast_c(s, ast_s(a, e)); }
    / e:equality_expression                                    { $$ = e; }

exclusive_or_expression
   <- e:exclusive_or_expression _ x:bitwise_xor _ a:and_expression  { $$ = ast_c(x, ast_s(e, a)); }
    / a:and_expression                                   { $$ = a; }

bitwise_xor
   <- '^'   { $$ = ast_n(auxil, T_BITWISE_XOR, $0, $0s); }

inclusive_or_expression
   <- i:inclusive_or_expression _ o:bitwise_or _ e:exclusive_or_expression  { $$ = ast_c(o, ast_s(i, e)); }
    / e:exclusive_or_expression                                   { $$ = e; }

bitwise_or
   <- '|'   { $$ = ast_n(auxil, T_BITWISE_OR, $0, $0s); }

logical_and_expression
   <- l:logical_and_expression _ a:and_op _ i:inclusive_or_expression  { $$ = ast_c(a, ast_s(l, i)); }
    / i:inclusive_or_expression                                       { $$ = i; }

logical_or_expression
   <- lo:logical_or_expression _ oo:or_op _ la:logical_and_expression  { $$ = ast_c(oo, ast_s(lo, la)); }
    / la:logical_and_expression                                       { $$ = la; }

conditional_expression
   <- lo:logical_or_expression { $$ = lo; }

assignment_expression
   <- u:unary_expression _ ao:assignment_operator _ ae:assignment_expression  { $$ = ast_c(ao, ast_s(u, ae)); }
    / c:conditional_expression { $$ = c; }

expression
   <- a:assignment_expression { $$ = a; }

assignment_operator
   <- b:basic_assignment   { $$ = b; }
    / '+='                 { $$ = ast_n(auxil, T_PLUS_EQUALS, $0, $0s); }
    / '-='                 { $$ = ast_n(auxil, T_MINUS_EQUALS, $0, $0s); }
    / '*='                 { $$ = ast_n(auxil, T_TIMES_EQUALS, $0, $0s); }
    / '/='                 { $$ = ast_n(auxil, T_DIVIDE_EQUALS, $0, $0s); }
    / '%='                 { $$ = ast_n(auxil, T_MODULO_EQUALS, $0, $0s); }
    / '&='                 { $$ = ast_n(auxil, T_BITWISE_AND_EQUALS, $0, $0s); }
    / '|='                 { $$ = ast_n(auxil, T_BITWISE_OR_EQUALS, $0, $0s); }
    / '^='                 { $$ = ast_n(auxil, T_BITWISE_XOR_EQUALS, $0, $0s); }
    / '<<='                { $$ = ast_n(auxil, T_LSHIFT_EQUALS, $0, $0s); }
    / '>>='                { $$ = ast_n(auxil, T_RSHIFT_EQUALS, $0, $0s); }

basic_assignment
   <- '='   { $$ = ast_n(auxil, T_ASSIGN, $0, $0s); }

member_initializer
   <- i:identifier _ a:basic_assignment _ e:expression   { $$ = ast_c(a, ast_s(i, e)); }
    / i:identifier _ a:basic_assignment _ in:initializer { $$ = ast_c(a, ast_s(i, in)); }

member_initializer_list
   <- mil:member_initializer_list _ kw_comma _ mi:member_initializer { $$ = ast_s(mil, mi); }
    / mi:member_initializer                                          { $$ = mi; }

struct_initializer
   <- kw_lcurly _ mil:member_initializer_list _ kw_rcurly              { $$ = ast_c(ast_n(auxil, T_STRUCT_INITIALIZER, "", $0s), mil); }
    / kw_lcurly _ mil:member_initializer_list _ kw_comma _ kw_rcurly   { $$ = ast_c(ast_n(auxil, T_STRUCT_INITIALIZER, "", $0s), mil); }

initializer
   <- e:expression            { $$ = e; }
    / si:struct_initializer   { $$ = si; }

compound_statement
   <- kw_lcurly _ kw_rcurly                     { $$ = ast_n(auxil, T_COMPOUND_STATEMENT, "", $0s); }
    / kw_lcurly _ sl:statement_list _ kw_rcurly { $$ = ast_c(ast_n(auxil, T_COMPOUND_STATEMENT, "", $0s), sl); }

expression_statement
   <- kw_semicolon { $$ = NULL; }
    / e:expression _ kw_semicolon { $$ = e; }
    / v:variable_declaration _ a:basic_assignment _ i:initializer _ kw_semicolon    { $$ = ast_c(a, ast_s(v, i)); }
    / e1:expression _ ao:assignment_operator _ e2:expression _ kw_semicolon     { $$ = ast_c(ao, ast_s(e1, e2)); }
    / e:expression _ a:basic_assignment _ i:initializer                       { $$ = ast_c(a, ast_s(e, i)); }

match_body
   <- kw_lcurly _ ml:match_case_list _ kw_rcurly { $$ = ml; }

match_case_list
   <- mcl:match_case_list _ c:match_case { $$ = ast_s(mcl, c); }
    / c:match_case                       { $$ = c; }

match_case
   <- u:underscore _ kw_colon _ s:statement              { $$ = ast_c(ast_n(auxil, T_MATCH_ARM, "", $0s), ast_s(ast_c(ast_n(auxil, T_MATCH_ARM_ACTION, "", $0s), s), u)); }
    / mcl:match_constant_list _ kw_colon _ s:statement   { $$ = ast_c(ast_n(auxil, T_MATCH_ARM, "", $0s), ast_s(ast_c(ast_n(auxil, T_MATCH_ARM_ACTION, "", $0s), s), mcl)); }
    / mil:match_identifier_list _ kw_colon _ s:statement { $$ = ast_c(ast_n(auxil, T_MATCH_ARM, "", $0s), ast_s(ast_c(ast_n(auxil, T_MATCH_ARM_ACTION, "", $0s), s), mil)); }

match_constant_list
   <- mcl: match_constant_list _ kw_comma _ c:constant   { $$ = ast_s(mcl, c); }
    / c:constant                                         { $$ = c; }

match_identifier_list
   <- mil: match_identifier_list _ kw_comma _ i:identifier  { $$ = ast_s(mil, i); }
    / i:identifier                                          { $$ = i; }


statement
   <- c:compound_statement                                                                                                 { $$ = c; }
    / s:struct_declaration _ kw_semicolon                                                                                  { $$ = s; } # TODO: remove semicolon
    / e:enum_declaration _ kw_semicolon                                                                                    { $$ = e; } # TODO: remove semicolon
    / i:impl_block                                                                                                         { $$ = i; }
    / e:expression_statement                                                                                               { $$ = e; }
    / v:variable_declaration_statement                                                                                     { $$ = v; }
    / e:expression _ kw_semicolon                                                                                          { $$ = e; } # TODO: remove duplicate
    / if:if _ kw_lparen _ e:expression _ kw_rparen _ s1:statement _ kw_else _ s2:statement                                 { $$ = ast_c(if, ast_s(e, ast_s(s1, s2))); }
    / if:if _ kw_lparen _ e:expression _ kw_rparen _ s:statement                                                           { $$ = ast_c(if, ast_s(e, s)); }
    / w:while _ kw_lparen _ e:expression _ kw_rparen _ s:statement                                                         { $$ = ast_c(w, ast_s(e, s)); }
    / f:for _ kw_lparen _ e1:expression_statement _ e2:expression_statement _ e3:expression _ kw_rparen _ body:statement   { $$ = ast_c(f, ast_s(ast_s(e1, ast_s(e2, e3)), body)); }
    / f:for _ kw_lparen _ e1:expression_statement _ e2:expression_statement _ kw_rparen _ body:statement                   { $$ = ast_c(f, ast_s(ast_s(e1, e2), body)); }
    / m:match _ kw_lparen _ e:expression _ kw_rparen _ b:match_body                                                        { $$ = ast_c(m, ast_s(e, b)); }
    / r:return _ e:expression kw_semicolon                                                                                 { $$ = ast_c(r, e); }
    / r:return _ kw_semicolon                                                                                              { $$ = r; }

statement_list
   <- sl:statement_list _ s:statement  { $$ = ast_s(sl, s); }
    / s:statement                      { $$ = s; }

# only allow array sizes to be declared at the very end of a type name (no multidimensional arrays)
type_name
   <- t:incomplete_type_name _ kw_lbracket _ c:constant _ kw_rbracket   { $$ = ast_c(ast_n(auxil, T_TYPE_NAME, "", $0s), ast_s(t, ast_c(ast_n(auxil, T_ARRAY_INDEX, "", $0s), c))); }
    / t:incomplete_type_name                                            { $$ = ast_c(ast_n(auxil, T_TYPE_NAME, "", $0s), t); }

incomplete_type_name
   <- t:incomplete_type_name _ d:dereference { $$ = ast_s(t, d); }
    / n:non_pointer_typename       { $$ = n; }

dereference
   <- '*' { $$ = ast_n(auxil, T_DEREFERENCE, $0, $0s); }

non_pointer_typename
   <- t:any       { $$ = t; }
    / t:u8         { $$ = t; }
    / t:u16        { $$ = t; }
    / t:u32        { $$ = t; }
    / t:u64        { $$ = t; }
    / s:cap_self   { $$ = s; }
    / i:identifier { $$ = i; }

identifier
   <- !keyword LETTER(LETTER/DIGIT)*  { $$ = ast_n(auxil, T_IDENTIFIER, $0, $0s); }
    / s:self                          { $$ = s; }

# integer
#		<- '0'[xX]X+
#		 {
#				 $$ = match(t_constant)
#		 }
#		 / !'0' D+
#		 {
#				 $$ = match(t_constant)
#		 }

keyword
   <- kw_fun
    / kw_struct
    / kw_enum
    / kw_any
    / kw_u8
    / kw_u16
    / kw_u32
    / kw_u64
    / kw_sizeof
    / kw_if
    / kw_else
    / kw_while
    / kw_for
    / kw_match
    / kw_return
    / kw_asm
    / kw_dot
    / kw_star
    / kw_tilde
    / kw_exclamation
    / kw_left_op
    / kw_right_op
    / kw_le_op
    / kw_ge_op
    / kw_eq_op
    / kw_ne_op
    / kw_and_op
    / kw_single_and
    / kw_or_op
    / kw_impl
    / kw_self
    / kw_cap_self
    / kw_public
    / kw_associated_call
    / kw_colon
    / kw_underscore

kw_fun		   <- 'fun' !(LETTER/DIGIT)
kw_struct      <- 'struct' !(LETTER/DIGIT)
kw_enum        <- 'enum' !(LETTER/DIGIT)
kw_any		   <- 'any' !(LETTER/DIGIT)
kw_u8		      <- 'u8' !(LETTER/DIGIT)
kw_u16		   <- 'u16' !(LETTER/DIGIT)
kw_u32		   <- 'u32' !(LETTER/DIGIT)
kw_u64		   <- 'u64' !(LETTER/DIGIT)
kw_sizeof      <- 'sizeof' !(LETTER/DIGIT)
kw_if		      <- 'if' !(LETTER/DIGIT)
kw_while       <- 'while' !(LETTER/DIGIT)
kw_for         <- 'for' !(LETTER/DIGIT)
kw_match       <- 'match' !(LETTER/DIGIT)
kw_return      <- 'return' !(LETTER/DIGIT)
kw_extern      <- 'extern' !(LETTER/DIGIT)
kw_dot         <- '.' !('.')
kw_star        <- '*' !('=')
kw_tilde       <- '~'
kw_exclamation <- '!' !('=')
kw_left_op     <- '<<'
kw_right_op    <- '>>'
kw_le_op       <- '<='
kw_ge_op       <- '>='
kw_eq_op       <- '=='
kw_ne_op       <- '!='
kw_and_op      <- '&&'
kw_single_and  <- '&' !(kw_single_and)
kw_or_op       <- '||'
kw_impl        <- 'impl' !(LETTER/DIGIT)
kw_self        <- 'self' !(LETTER/DIGIT)
kw_cap_self    <- 'Self' !(LETTER/DIGIT)
kw_public      <- 'public' !(LETTER/DIGIT)
kw_associated_call<- '::'
kw_underscore  <- '_' !(LETTER/DIGIT)




# nontree keywords
kw_semicolon   <- ';'                     { manage_source_location(auxil, $0); }
kw_comma       <- ','                     { manage_source_location(auxil, $0); }
kw_else        <- 'else' !(LETTER/DIGIT)  { manage_source_location(auxil, $0); }
kw_asm         <- 'asm' !(LETTER/DIGIT)   { manage_source_location(auxil, $0); }
kw_lcurly      <- '{'                     { manage_source_location(auxil, $0); }
kw_rcurly      <- '}'                     { manage_source_location(auxil, $0); }
kw_lparen      <- '('                     { manage_source_location(auxil, $0); }
kw_rparen      <- ')'                     { manage_source_location(auxil, $0); }
kw_lbracket    <- '['                     { manage_source_location(auxil, $0); }
kw_rbracket    <- ']'                     { manage_source_location(auxil, $0); }
kw_colon       <- ':' !(':')              { manage_source_location(auxil, $0); }



fun            <- kw_fun     { $$ = ast_n(auxil, T_FUN, $0, $0s); }
struct         <- kw_struct  { $$ = ast_n(auxil, T_STRUCT, $0, $0s); }
enum           <- kw_enum    { $$ = ast_n(auxil, T_ENUM, $0, $0s); }
any            <- kw_any     { $$ = ast_n(auxil, T_ANY, $0, $0s); }
u8             <- kw_u8      { $$ = ast_n(auxil, T_U8, $0, $0s); }
u16            <- kw_u16     { $$ = ast_n(auxil, T_U16, $0, $0s); }
u32            <- kw_u32     { $$ = ast_n(auxil, T_U32, $0, $0s); }
u64            <- kw_u64     { $$ = ast_n(auxil, T_U64, $0, $0s); }
sizeof         <- kw_sizeof  { $$ = ast_n(auxil, T_SIZEOF, $0, $0s); }
if             <- kw_if      { $$ = ast_n(auxil, T_IF, $0, $0s); }
while          <- kw_while   { $$ = ast_n(auxil, T_WHILE, $0, $0s); }
for            <- kw_for     { $$ = ast_n(auxil, T_FOR, $0, $0s); }
match          <- kw_match   { $$ = ast_n(auxil, T_MATCH, $0, $0s); }
return         <- kw_return  { $$ = ast_n(auxil, T_RETURN, $0, $0s); }
extern         <- kw_extern  { $$ = ast_n(auxil, T_EXTERN, $0, $0s); }
impl           <- kw_impl    { $$ = ast_n(auxil, T_IMPL, $0, $0s); }
self           <- kw_self    { $$ = ast_n(auxil, T_SELF, $0, $0s); }
cap_self       <- kw_cap_self { $$ = ast_n(auxil, T_CAP_SELF, $0, $0s); }
public         <- kw_public  { $$ = ast_n(auxil, T_PUBLIC, $0, $0s); }
associated_call<- kw_associated_call { $$ = ast_n(auxil, T_ASSOCIATED_CALL, $0, $0s); }
underscore     <- kw_underscore { $$ = ast_n(auxil, T_UNDERSCORE, $0, $0s); }

dot           <- kw_dot       { $$ = ast_n(auxil, T_DOT, $0, $0s); }
left_op       <- kw_left_op   { $$ = ast_n(auxil, T_LSHIFT, $0, $0s); }
right_op      <- kw_right_op  { $$ = ast_n(auxil, T_RSHIFT, $0, $0s); }
le_op         <- kw_le_op     { $$ = ast_n(auxil, T_LESS_THAN_EQUALS, $0, $0s); }
ge_op         <- kw_ge_op     { $$ = ast_n(auxil, T_GREATER_THAN_EQUALS, $0, $0s); }
eq_op         <- kw_eq_op     { $$ = ast_n(auxil, T_EQUALS, $0, $0s); }
ne_op         <- kw_ne_op     { $$ = ast_n(auxil, T_NOT_EQUALS, $0, $0s); }
and_op        <- kw_and_op    { $$ = ast_n(auxil, T_LOGICAL_AND, $0, $0s); }
# could be either addres-of or bitwise and - should be set by the parser when true meaning is determined 
single_and    <- kw_single_and   { $$ = ast_n(auxil, T_BITWISE_AND, $0, $0s); } 
or_op         <- kw_or_op     { $$ = ast_n(auxil, T_LOGICAL_OR, $0, $0s); }


# O <- [0-7]
DIGIT <- [0-9]
# X <- [0-9a-fA-F]
LETTER <- [a-zA-Z_]


escape_character
   <- "\\a"
    / "\\b"
    / "\\n"
    / "\\r"
    / "\\t"
    / "\\\\"
    / "\\'"
    / "\\\""

# TODO: T_HEX_CONSTANT
constant
   <- "0x" [0-9ABCDEFabcdef]+                            { $$ = ast_n(auxil, T_CONSTANT, $0, $0s); }
    / DIGIT+                                             { $$ = ast_n(auxil, T_CONSTANT, $0, $0s); }
    / single_quote c:char_literal_contents single_quote  { $$ = c; }

char_literal_contents
   <- char_literal_character    { $$ = ast_n(auxil, T_CHAR_LITERAL, $0, $0s); }

single_quote
   <- "\'" { manage_source_location(auxil, $0); }

char_literal_character
   <- escape_character
    / [^"\'"]

string_literal
   <- double_quote s:string_literal_contents double_quote   { $$ = s; }

string_literal_contents
   <- string_literal_character* { $$ = ast_n(auxil, T_STRING_LITERAL, $0, $0s); }

double_quote
   <- '"' { manage_source_location(auxil, $0); }

string_literal_character
   <- escape_character
    / [^"\""]
    / "'"
_ 
   <- _ _
    / whitespace

preprocessor_data
   <- preprocessor_new_file_with_line
    / preprocessor_resume_file_with_line
    / preprocessor_system_header_file_with_line
    / '#' space* '1' space* <(!space .)+> (!eol .)* eol { manage_non_source_location(auxil, $0); }
    / '#' space* '0' (!eol .)* eol { manage_non_source_location(auxil, $0); }
    / '#' space* [12] (!eol .)* eol { manage_non_source_location(auxil, $0); }

preprocessor_new_file_with_line
   <- '#' space* '1' space* <(!space .)+> space* <DIGIT+> (!eol .)* eol { manage_non_source_location(auxil, $0); set_current_file(auxil, $0, atoi($2), $1); }

preprocessor_resume_file_with_line
   <- '#' space* '2' space* <(!space .)+> space* <DIGIT+> (!eol .)* eol { manage_non_source_location(auxil, $0); set_current_file(auxil, $0, atoi($2), $1); }
 
preprocessor_system_header_file_with_line
   <- '#' space* '3' space* <(!space .)+> space* <DIGIT+> (!eol .)* eol { manage_non_source_location(auxil, $0); set_current_file(auxil, $0, atoi($2), $1); }

whitespace
   <- space* { manage_source_location(auxil, $0); }

space <- blank / eol
blank <- [ \t\v\f]
eol <- '\r\n' / '\n' / '\r'
eof <- !.