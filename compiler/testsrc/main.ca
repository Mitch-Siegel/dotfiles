#include "math.h"
#include "print.h"

/* 
 * come up with some magic numbers
 * fiddle with what widths these variables are
 * the values they come back with are always correct (modulo their widths)
 * This proves that the global variable system works for arbitrary variables
 *
 * On printFibs(15), results of
 * printNum(big, 1);
 * printNum(big2, 1);
 * printNum(med, 1);
 * printNum(small, 1);
 * should be 15, 105, 560, 76
 */
uint32 big;
uint16 med;
uint8 small;
uint32 big2;

fun printFibs(uint8 n->void)
{
	uint8 i = 0;
	while(i < n)
	{
		// modify our global magic numbers based on the iterations of this loop
		big = big + 1;
		big2 = big2 + i;
		med = med + big2;
		small = small + med;
		printNum(fib(i), 0);
		i = i + 1;
		if(i < n)
		{
			print(',');
		}
	}
	print(10);
}

fun main(->void)
{
	uint8 fibStr[12];
	fibStr[0] = 'F';
	fibStr[1] = 'i';	
	fibStr[2] = 'b';	
	fibStr[3] = 'o';	
	fibStr[4] = 'n';	
	fibStr[5] = 'a';	
	fibStr[6] = 'c';	
	fibStr[7] = 'c';
	fibStr[8] = 'i';
	fibStr[9] = ':';
	fibStr[10] = ' ';
	fibStr[11] = 0;

	uint8 timesStr[15];
	timesStr[0] = 'T';
	timesStr[1] = 'i';	
	timesStr[2] = 'm';	
	timesStr[3] = 'e';	
	timesStr[4] = 's';	
	timesStr[5] = ' ';	
	timesStr[6] = 'T';	
	timesStr[7] = 'a';
	timesStr[8] = 'b';
	timesStr[9] = 'l';
	timesStr[10] = 'e';
	timesStr[11] = 's';
	timesStr[12] = ':';
	timesStr[13] = 10;
	timesStr[14] = 0;

	uint8 mulStr[9];
	mulStr[0] = '#';
	mulStr[1] = ' ';	
	mulStr[2] = 'M';	
	mulStr[3] = 'u';	
	mulStr[4] = 'l';	
	mulStr[5] = 's';	
	mulStr[6] = ':';	
	mulStr[7] = ' ';
	mulStr[8] = 0;


	printStr(fibStr);
	printFibs(15);

	printStr(timesStr);
	uint8 i = 1;
	uint8 j;
	while(i < 10)
	{
		j = 1;
		while(j < 10)
		{
			uint8 nPrinted = printNum(mul(i, j), 0);
			while(nPrinted < 3)
			{
				print(' ');
				nPrinted = nPrinted + 1;
			}
			j = j + 1;
		}
		print(10);
		i = i + 1;
	}

	
	printStr(mulStr);
	printMultiplications();

	printNum(big, 1);
	printNum(big2, 1);
	printNum(med, 1);
	printNum(small, 1);

}

