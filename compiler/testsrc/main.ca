//#include "math.h"
//#include "print.h"

/* 
 * come up with some magic numbers
 * fiddle with what widths these variables are
 * the values they come back with are always correct (modulo their widths)
 * This proves that the global variable system works for arbitrary variables
 *
 * On printFibs(15), results of
 * printNum(big, 1);
 * printNum(big2, 1);
 * printNum(med, 1);
 * printNum(small, 1);
 * should be 15, 105, 560, 76
 */
/*
uint32 big;
uint16 med;
uint8 small;
uint32 big2;

fun printFibs(uint8 n->void)
{
	uint8 i = 0;
	while(i < n)
	{
		// modify our global magic numbers based on the iterations of this loop
		big = big + 1;
		big2 = big2 + i;
		med = med + big2;
		small = small + med;
		printNum(fib(i), 0);
		i = i + 1;
		if(i < n)
		{
			print(',');
		}
	}
	print(10);
}

fun main(->void)
{
	uint8 *fibStr = "Fibonacci: ";

	uint8 *timesStr;
	timesStr = "Times Tables: ";
	uint8 newlineChar = 10;
	uint8 index = 5;
	timesStr[index] = newlineChar;

	printStr(fibStr);
	printFibs(15);

	printStr(timesStr);
	uint8 i = 1;
	uint8 j;
	while(i < 10)
	{
		j = 1;
		while(j < 10)
		{
			uint8 nPrinted = printNum(mul(i, j), 0);
			while(nPrinted < 3)
			{
				print(' ');
				nPrinted = nPrinted + 1;
			}
			j = j + 1;
		}
		print(10);
		i = i + 1;
	}

	
	printStr("Number of multiplications: ");
	printMultiplications();

	printStr("Magic Number 1: ");
	printNum(big, 1);
	printStr("Magic Number 2: ");
	printNum(big2, 1);
	printStr("Magic Number 3: ");
	printNum(med, 1);
	printStr("Magic Number 4: ");
	printNum(small, 1);
}
*/

fun print(uint8 value->void)
{
	// store r0, pull the argument into a register, then output that register
	asm {
		movb %r0, (%bp+8)
		out 0, %r0
	}
	;
}
fun mod(uint32 a, uint32 divisor->uint32)
{
	while (a >= divisor)
	{
		a = a - divisor;
	}
	return a;
}

fun div(uint32 a, uint32 b->uint32)
{
	uint32 al = a;
	uint32 bl = b;
	uint32 quotient = 0;
	while (al >= bl)
	{
		al = al - bl;
		quotient = quotient + 1;
	}
	return quotient;
}

uint32 nMultiplications = 0;
fun mul(uint32 a, uint32 b->uint32)
{
	uint32 result = 0;
	while(b > 0)
	{
		result = result + a;
		b = b - 1;
	}
	nMultiplications = nMultiplications + 1;
	return result;
}

fun printNum(uint32 num, uint32 newLine->uint8)
{
	uint8 outStr[16];
	uint32 digits = 0;
	if (num == 0)
	{
		outStr[0] = '0';
		digits = 1;
	}
	else
	{
		while (num > 0)
		{
			uint32 remainder = mod(num, 10);
			outStr[digits] = remainder + 48;
			num = div(num, 10);
			digits = digits + 1;
		}
	}

	uint32 i = 0;
	while (i < digits)
	{
		print(outStr[digits - i - 1]);
		i = i + 1;
	}

	if (newLine > 0)
	{
		digits = digits + 1;
		print(10); // newline
	}
	return digits;
}

fun printStr(uint8 *str->void)
{
	uint32 i = 0;
	while(str[i] != 0)
	{
		print(str[i]);
		i = i + 1;
	}
}

fun printStrBroken(uint8 *str->void)
{
	while(*str != 0)
	{
		print(*str);
		str = str + 1;
	}
}


fun main(->void)
{
	uint8 *testStr = "I am string";
	printStr(testStr);
	uint8 i = 0;
	while(i < 20)
	{
		printNum((i + 1234), 1);
		i = i + 1;
	}

}