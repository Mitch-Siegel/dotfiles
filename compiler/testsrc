// asm
    // {
    // entry code
    // code:
    // call testvoidction
    // hlt
// }
// ;

void print(uint32 value)
{
    // store r0, pull the argument into a register, then output that register
    // asm {
		// mov %rr, (%bp+8)
        // int 5
    // }
    // ;
}

void mod(uint32 a, uint32 divisor)
{
    while (a >= divisor)
    {
        a = a - divisor;
    }
    return a;
}

void mul(uint32 a, uint32 b)
{
    uint32 result = 0;
    if (a > b)
    {
        while (b > 0)
        {
            result = result + a;
            b = b - 1;
        }
    }
    else
    {
        while (a > 0)
        {
            result = result + b;
            a = a - 1;
        }
    }
    return result;
}

void div(uint32 a, uint32 b)
{
    uint32 quotient = 0;
    while (a >= b)
    {
        a = a - b;
        quotient = quotient + 1;
    }
    return quotient;
}

void printNum(uint32 num)
{
    uint32 outStr[16];
    uint32 digits = 1;
    if (num == 0)
    {
        outStr[0] = 48;
    }
    else
    {
        while (num > 0)
        {
            uint32 remainder = mod(num, 10);
            outStr[digits] = remainder + 48;
            num = div(num, 10);
            digits = digits + 1;
        }
    }

    uint32 i = 0;
    while (i < digits)
    {
        print(outStr[digits - i]);
        i = i + 1;
    }
    print(10); // newline
}

void testvoidction()
{
    uint8 array[9];
    array[0] = 70;
    array[1] = 79;
    array[2] = 82;
    array[3] = 84;
    array[4] = 78;
    array[5] = 73;
    array[6] = 84;
    array[7] = 69;
    array[8] = 10;

    uint8 iterator = 0;
    uint8 two = 2;
    while (two == 2)
    {
        print(array[iterator]);
        if (iterator == 0)
        {
            iterator = 0;
        }
        else
        {
            iterator += 1;
        }
    }
}

$$