#include "console.h"

uint8 *MEMMAP_UART = 1280;
uint8 consBuf[128];
uint8 consBufLen = 0;

fun cheat(uint8 char->void) asm
{
    push %r0
    movb %r0, (%bp+8)
    out $0, %r0
    pop %r0
}

fun numCheat(uint32 num->void) asm
{
    push %r0
    movb %r0, $82
    out $0, %r0
    movb %r0, $69
    out $0, %r0
    mov %r0, (%bp+8)
    out $1, %r0
    pop %r0
}

fun write(uint8 char->void) asm
{
    push %r0
    push %r1
    push %r2
    mov %r1, $1281 ; status register of uart
    jmp write_skippy
    write_spinloop:
        movb %r0, (%r1)
        out $0, %r0
        cmpi %r0, $0
        jne write_spinloop
    write_skippy:
        movb %r0, $2
        movb (%r1), %r0
        movb %r0, (%bp+8)
        mov %r1, $1280 ; xr register of uart
        movb (%r1), %r0
    pop %r2
    pop %r1
    pop %r0
    
}

fun handleLine(->void)
{
    uint8 i = 0;
    while(i < consBufLen)
    {
        write(consBuf[i]);
        i = i + 1;
    }
    consBufLen = 0;
}

fun charISR(->void)
{
    uint8 char = MEMMAP_UART[0];
    write(char); // echo back the character

    // handle backspace
    if(char == 8)
    {
        consBufLen -= 1;
        return;
    }

    consBuf[consBufLen] = char;
    consBufLen += 1;
    MEMMAP_UART[1] = 0;

    // handle enter
    if(char == 10)
    {
        handleLine();
    }
}

fun uartISR(->void) asm
{
    call charISR
    reti   
}

fun setupConsole(->void) asm
{
	push %r1
	push %r0
	mov %r0, $256 ; load the address of the IDT
	mov %r1, uartISR
	mov (%r0), %r1
	pop %r0
	pop %r1
}
