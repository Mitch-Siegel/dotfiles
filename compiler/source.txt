
asm{
	entry code
	;data@ data
code:
	push $25
	call fibArr
	hlt
};

fun print(var value)
{
	// store r0, pull the argument into a register, then output that register
	asm{
		push %r0
		mov %r0, 4(%bp)
		out %r0
		pop %r0
	};
}


fun fibArr(var a)
{
	var fibArray[32];
	fibArray[0] = 0;
	fibArray[1] = 1;

	var i = 2;
	while(i < a)
	{
		fibArray[i] = fibArray[i - 1] + fibArray[i - 2];
		i = i + 1;
	}

	i = 0;
	while(i < a)
	{
		print(fibArray[i]);
		i = i + 1;
	}
}


/*
fun mul(var x, var y)
{
	var retval = 0;
	if(x < y)
	{
		while(x > 0)
		{
			retval = retval + y;
			x = x - 1;
		}
	}
	else
	{
		while(y > 0)
		{
			retval = retval + x;
			y = y - 1;
		}
	}
	return retval;
}

//will make a nice grid in the hex editor of memdump at address 512
fun gradient()
{
	var **g = 512;
	var i = 0;
	while(i < 8)
	{
		g[i] = g + mul(i, 16) + 16;
		var j = 0;
		while(j < 8)
		{
			var *addr = g[i];
			addr[j] = mul(j + 1, i + 1) + 48;
			j = j + 1;
		}
		i = i + 1;
	}
}
*/
$$
