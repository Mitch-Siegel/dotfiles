use std::fmt::Display;

#[derive(Clone, Debug)]
pub enum Token {
    U8,
    U16,
    U32,
    U64,
    I8,
    I16,
    I32,
    I64,
    Plus,
    Minus,
    Star,
    FSlash,
    LThan,
    GThan,
    LThanE,
    GThanE,
    Equals,
    NotEquals,
    Assign,
    Fun,
    If,
    Else,
    While,
    LParen,
    RParen,
    Arrow,
    LCurly,
    RCurly,
    Comma,
    Semicolon,
    Colon,
    Identifier(String),
    UnsignedDecimalConstant(usize),
    Eof,
}

impl PartialEq for Token {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Token::U8, Token::U8) => true,
            (Token::U16, Token::U16) => true,
            (Token::U32, Token::U32) => true,
            (Token::U64, Token::U64) => true,
            (Token::I8, Token::I8) => true,
            (Token::I16, Token::I16) => true,
            (Token::I32, Token::I32) => true,
            (Token::I64, Token::I64) => true,
            (Token::Plus, Token::Plus) => true,
            (Token::Minus, Token::Minus) => true,
            (Token::Star, Token::Star) => true,
            (Token::FSlash, Token::FSlash) => true,
            (Token::LThan, Token::LThan) => true,
            (Token::GThan, Token::GThan) => true,
            (Token::LThanE, Token::LThanE) => true,
            (Token::GThanE, Token::GThanE) => true,
            (Token::Equals, Token::Equals) => true,
            (Token::NotEquals, Token::NotEquals) => true,
            (Token::Assign, Token::Assign) => true,
            (Token::Fun, Token::Fun) => true,
            (Token::If, Token::If) => true,
            (Token::Else, Token::Else) => true,
            (Token::While, Token::While) => true,
            (Token::LParen, Token::LParen) => true,
            (Token::RParen, Token::RParen) => true,
            (Token::Arrow, Token::Arrow) => true,
            (Token::LCurly, Token::LCurly) => true,
            (Token::RCurly, Token::RCurly) => true,
            (Token::Comma, Token::Comma) => true,
            (Token::Semicolon, Token::Semicolon) => true,
            (Token::Colon, Token::Colon) => true,
            (Token::Identifier(a), Token::Identifier(b)) => a == b,
            (Token::UnsignedDecimalConstant(a), Token::UnsignedDecimalConstant(b)) => a == b,
            (Token::Eof, Token::Eof) => true,
            _ => false,
        }
    }
}

impl Eq for Token {}

impl Display for Token {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::U8 => write!(f, "u8"),
            Self::U16 => write!(f, "u16"),
            Self::U32 => write!(f, "u32"),
            Self::U64 => write!(f, "u64"),
            Self::I8 => write!(f, "I8"),
            Self::I16 => write!(f, "I16"),
            Self::I32 => write!(f, "I32"),
            Self::I64 => write!(f, "I64"),
            Self::Plus => write!(f, "+"),
            Self::Minus => write!(f, "-"),
            Self::Star => write!(f, "*"),
            Self::FSlash => write!(f, "/"),
            Self::GThan => write!(f, ">"),
            Self::GThanE => write!(f, ">="),
            Self::LThan => write!(f, "<"),
            Self::LThanE => write!(f, "<="),
            Self::Equals => write!(f, "=="),
            Self::NotEquals => write!(f, "!="),
            Self::Assign => write!(f, "="),
            Self::Fun => write!(f, "fun"),
            Self::If => write!(f, "if"),
            Self::Else => write!(f, "else"),
            Self::While => write!(f, "while"),
            Self::LParen => write!(f, "("),
            Self::RParen => write!(f, ")"),
            Self::Arrow => write!(f, "->"),
            Self::LCurly => write!(f, "{{"),
            Self::RCurly => write!(f, "}}"),
            Self::Comma => write!(f, ","),
            Self::Semicolon => write!(f, ";"),
            Self::Colon => write!(f, ":"),
            Self::Identifier(string) => write!(f, "Identifier({})", string),
            Self::UnsignedDecimalConstant(constant) => {
                write!(f, "UnsignedDecimalConstant({})", constant)
            }
            Self::Eof => write!(f, "EOF"),
        }
    }
}
